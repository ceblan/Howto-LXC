:PROPERTIES:
:ID:       18d09336-9ce3-4f81-8dac-6251fa29abc0
:GPTEL_MODEL: gpt-4o-mini
:GPTEL_BACKEND: ChatGPT
:GPTEL_SYSTEM: You are a large language model living in Emacs and a helpful assistant. Respond concisely.
:GPTEL_BOUNDS: ((633 . 973) (989 . 1106) (1121 . 1214) (1229 . 1230) (1332 . 1388) (1403 . 1414) (1468 . 1495) (1510 . 1774) (1789 . 1845) (1933 . 2169) (2562 . 2564) (2644 . 2746) (2761 . 2762) (2767 . 2775) (2776 . 2952) (3093 . 3226) (6959 . 6985) (6990 . 6991) (6992 . 6993) (6996 . 7049) (7054 . 7055) (7059 . 7111) (7116 . 7117) (7121 . 7144) (7180 . 7200) (7214 . 7215) (7229 . 7233))
:END:

#+OPTIONS: toc:nil
#+TOC: headlines
#+title: LXC Containers
#+filetags: :LXC:

* RSS LXC Containers

This note contains some recipes for creating and configuring LXC containers to
run:

1. BANANA.

** BANANA setup

We split the BANANA set up in three stages, each one with its own ansible
playbook:

1. [[id:214611e0-4085-451e-bfb1-fba2f6a2152e][BANANA lxc playbook]]
2. [[id:6a9266c3-768a-4d72-8248-38aaae095445][BANANA packages installation]]

*** BANANA LXC initial setup

Below re the tasks as well as some tips about how to provision a BANANA using
LXC

**** How to create a LXC debian bookworm container in debian:

To create an LXC Debian Bookworm container in Debian, follow these steps:

1. *Install LXC* (if not already installed):
   #+begin_src shell :tangle no 
   sudo apt update
   sudo apt install lxc
   #+end_src

2. *Create a directory for your container*:
   #+begin_src shell :tangle no
   sudo mkdir -p /var/lib/lxc/BANANA
   #+end_src

3. *Create the container*:
   #+begin_src shell :tangle no
     sudo lxc-create --name BANANA --template download -- --dist debian --release bookworm --arch amd64
   #+end_src

4. *Start the container*:
   #+begin_src shell :tangle no
   sudo lxc-start -n BANANA
   #+end_src

5. *Access the containerâ€™s shell*:
   #+begin_src shell :tangle no
   sudo lxc-attach -n BANANA
   #+end_src

You now have a running Debian Bookworm container!

**** How to delete or remove a LXC container:

To delete or remove an LXC container, follow these steps:

1. *Stop the container* (if it is running):
   #+begin_src shell :tangle no
   sudo lxc-stop -n BANANA
   #+end_src

2. *Delete the container*:
   #+begin_src shell :tangle no
   sudo lxc-destroy -n BANANA
   #+end_src

After these commands, the =BANANA= LXC container will be removed from your
system.

**** How to make the container to get same ip address every start:

To assign a static IP address to your LXC container, you can follow these steps:

1. Stop BANANA container
2. Uncomment the line "LXC_DHCP_CONFILE=/etc/dnsmasq.conf"
3. as root in the server machine do
   #+begin_src shell :tangle no
     echo "dhcp-host=mycontainer,10.0.3.10" >>/etc/lxc/dnsmasq.conf
     ln -s /etc/lxc/dnsmasq.conf /etc/dnsmasq.conf
   #+end_src
4. restart lxc-net.service
   #+begin_src shell :tangle no
    systemctl status lxc-net.service 
   #+end_src
 
**** How to list all available containers and its status:

To list all available LXC containers along with their status, use the following
command:

#+begin_src shell :tangle no
sudo lxc-ls -f
#+end_src

This command will display a table with details about each container, including
its name, state (running, stopped), and other relevant information like IP
addresses.

**** *Ansible* playbook that performs all previous task on host tsc-host-1.
:PROPERTIES:
:ID:       214611e0-4085-451e-bfb1-fba2f6a2152e
:END:

Below there is an Ansible playbook that sets up the bananapi container (lxc) on the
host *tsc-host-1*, performing all the tasks you've outlined:

#+begin_src yaml :tangle ansible/tasks/create-lxc-bananapi.yml
  ---
  # - name: Set up LXC container for a bananapi
  #   hosts: urganda # here should be tsc-host-1 instead
  #   become: yes
  #   vars_files:
  #     - ./vars/vars.yml
  #     - ./vars/secrets.yml

  #   tasks:
      - name: Install LXC
        apt:
          name: lxc
          state: present
          update_cache: yes

      - name: Uncomment LXC_DHCP_CONFILE in dnsmasq.conf
        lineinfile:
          path: /etc/default/lxc-net
          regexp: '^#LXC_DHCP_CONFILE'
          line: 'LXC_DHCP_CONFILE=/etc/dnsmasq.conf'

      - name: Ensure the directory for SSH keys exists
        file:
          path: "{{ playbook_dir }}/files/ssh-keys/{{ DEST }}"
          state: directory

      - name: Check if keys exist
        shell: "find {{ playbook_dir }}/files/ssh-keys/{{ DEST }} -name '*key*' | wc -l"
        register: ssh_keys_exists
        changed_when: false

      - debug:
          msg: "Number of keys found: {{ ssh_keys_exists.stdout }}"

      - name: Generate SSH host keys
        command: ssh-keygen -t {{ item }} -N "" -f {{ playbook_dir }}/files/ssh-keys/{{ DEST }}/ssh_host_{{ item }}_key
        with_items:
          - rsa
          - ecdsa
          - ed25519
        when: ssh_keys_exists.stdout | trim | int != 6

      - name: Change {{ playbook_dir }}/files/ssh-keys/{{ DEST }} owner to {{ ansible_env.USER }}
        shell: "chown {{ ansible_env.USER }}:{{ ansible_env.USER }} {{ playbook_dir }}/files/ssh-keys/{{ DEST }}/*"
        register: ssh_key_files


      - name: Change keys permissions before copy
        shell: "chmod 644 {{ playbook_dir }}/files/ssh-keys/{{ DEST }}/*"
        register: ssh_key_files

      - name: Ensure the directory for SSH shared keys exists
        file:
          path: "{{ playbook_dir }}/files/ssh-keys/shared"
          state: directory

      - name: Check if shared keys exist
        shell: "find {{ playbook_dir }}/files/ssh-keys/shared/ -name 'id_rsa_lxc*' | wc -l"
        register: ssh_shared_keys_exists
        changed_when: false

      - debug:
          msg: "Number of shared keys found: {{ ssh_shared_keys_exists.stdout }}"

      - name: Generate SSH shared keys
        command: ssh-keygen -t rsa -N "" -f {{ playbook_dir }}/files/ssh-keys/shared/id_rsa_lxc
        when: ssh_shared_keys_exists.stdout | trim | int != 2

      - name: Change keys permissions before copy
        shell: "chmod 644 {{ playbook_dir }}/files/ssh-keys/shared/*"
        register: ssh_key_files


      - name: Check if {{ DEST }} container exists
        command: lxc-ls | grep {{ DEST }}
        register: tsc_exists
        ignore_errors: yes

      # - name: Output inventory sources
      #   debug:
      #     var: hostvars[inventory_hostname]['ansible_inventory_sources']

      # - name: Output tsc_exists
      #   debug:
      #     var: tsc_exists

      - name: Check if {{ DEST }} container exists
        command: lxc-ls --fancy
        register: lxc_list

      - name: Check if {{ DEST }} container is running
        command: lxc-ls --running | grep {{ DEST }}
        register: container_status
        ignore_errors: yes
        when: tsc_exists.rc == 0

      # - name: Output value of container_status
      #   debug:
      #     var: container_status

      - name: Stop {{ DEST }} container if it is running
        command: lxc-stop -n {{ DEST }}
        ignore_errors: yes
        when: container_status.stdout != "" and  DEST in container_status.stdout_lines

      - name: Destroy {{ DEST }} container if it exists
        command: lxc-destroy -n {{ DEST }}
        when: DEST in tsc_exists.stdout

      - name: Create directory for {{ DEST }} container
        file:
          path: /var/lib/lxc/{{ DEST }}
          state: directory

      - name: Check if {{ DEST }} container exists
        command: lxc-ls --fancy
        register: lxc_list

      - name: Create LXC container {{ DEST }} if it does not exist
        command: lxc-create --name {{ DEST }} --template download -- --dist debian --release bookworm --arch amd64
        when: "DEST not in lxc_list.stdout"

      - name: Get IP for {{ DEST }} from inventory
        shell: "grep {{ DEST }}.*ansible_host {{ hostvars[inventory_hostname]['ansible_inventory_sources'][0] }} | awk -F'=' '{print $2}'"
        register: tsc_ip_output

      - name: Print the IP of {{ DEST }}
        debug:
          msg: "IP of {{ DEST }}: {{ tsc_ip_output.stdout }}"

      - name: Remove static DHCP entries for {{ tsc_ip_output.stdout }} in dnsmasq.conf
        lineinfile:
          path: /etc/lxc/dnsmasq.conf
          state: absent
          regexp: '^dhcp-host=.*{{ tsc_ip_output.stdout }}.*'

      - name: Set static DHCP for {{ DEST }} in dnsmasq.conf
        lineinfile:
          path: /etc/lxc/dnsmasq.conf
          line: "dhcp-host={{ DEST }},{{ tsc_ip_output.stdout }}"

      - name: Create symlink for dnsmasq.conf
        file:
          src: /etc/lxc/dnsmasq.conf
          dest: /etc/dnsmasq.conf
          state: link

      - name: Remove lines containing {{ DEST }} from dnsmasq leases file
        command: sed -i '/{{ DEST }}/d' /var/lib/misc/dnsmasq.lxcbr0.leases

      - name: Restart lxc-net service
        systemd:
          name: lxc-net
          state: restarted

      - name: Start LXC container {{ DEST }}
        command: lxc-start -n {{ DEST }}
        when: "DEST not in lxc_list.stdout"

      - name: Check if {{ DEST }} container is running
        command: lxc-info -n {{ DEST }} -s
        register: container_status
        ignore_errors: true

      - name: Install OpenSSH server in {{ DEST }}
        command: lxc-attach -n {{ DEST }} -- apt-get install -y openssh-server
        when: container_status.rc == 0

      - name: Install Python3 in {{ DEST }}
        command: lxc-attach -n {{ DEST }} -- apt-get install -y python3 python-apt-common
        when: container_status.rc == 0

      # - name: Copy SSH host keys to {{ DEST }}
      #   command: lxc-file push {{ playbook_dir }}/files/ssh-keys/{{ DEST }}/* {{ DEST }}/etc/ssh/
      #   when: container_status.rc == 0

      - name: Get list of SSH host keys
        shell: "find {{ playbook_dir }}/files/ssh-keys/{{ DEST }} -name '*key*'"
        register: ssh_key_files

      - name: Copy SSH host keys to /var/lib/lxc/{{ DEST }}/rootfs/etc/ssh/
        copy:
          src: "{{ item }}"
          dest: "/var/lib/lxc/{{ DEST }}/rootfs/etc/ssh/"
          owner: root
          group: root
          mode: '0600'
        with_items: "{{ ssh_key_files.stdout_lines }}"

      - name: Change public keys permissions after copy
        shell: "chmod 644 /var/lib/lxc/{{ DEST }}/rootfs/etc/ssh/*pub"

      - name: Restart SSH service in {{ DEST }}
        command: lxc-attach -n {{ DEST }} -- /etc/init.d/ssh restart

      - name: Set root password for {{ DEST }}
        command: lxc-attach -n {{ DEST }} -- sh -c "echo 'root:{{  root_password }}' | chpasswd"

      - name: Create user {{ banana_username }}
        command: lxc-attach -n {{ DEST }} -- adduser --disabled-password --gecos "" --uid {{banana_uid}} {{ banana_username }}

      - name: Create group {{ devpl_group}} with GID {{ devpl_gid }} in the LXC container
        command: lxc-attach -n {{ DEST }} -- echo "{{devpl_group}}:x:{{ devpl_gid}}:{{banana_username}}" >> /etc/group

      - name: Add user {{ banana_username }} to the sudo group
        command: lxc-attach -n {{ DEST }} -- usermod -aG sudo {{ banana_username }}

      - name: Set {{ banana_username }} password for {{ DEST }}
        command: lxc-attach -n {{ DEST }} -- sh -c "echo '{{ banana_username }}:{{  root_password }}' | chpasswd"

      - name: Add {{ devpl_group }}group
        command: lxc-attach -n {{ DEST }} -- groupadd -g 300 {{ devpl_group }} 

      - name: Add user {{ banana_username }} to the {{ devpl_group }} group
        command: lxc-attach -n {{ DEST }} -- usermod -aG devpl {{ banana_username }}

      - name: Allow members of the sudo group to run sudo without a password
        become: yes
        become_method: sudo
        lineinfile:
          path:  "/var/lib/lxc/{{ DEST }}/rootfs/etc/sudoers"
          regexp: '^%sudo'
          line: '%sudo ALL=(ALL:ALL) NOPASSWD: ALL'

      - name: Restart sudo
        command: lxc-attach -n {{ DEST }} -- /etc/init.d/sudo restart

      - name: Create dir /home/{{ banana_username }}/.ssh
        command: lxc-attach -n {{ DEST }} -- sh -c "mkdir -p /home/{{ banana_username }}/.ssh; chown -R {{ banana_username }}:{{ banana_username }} /home/{{ banana_username }}/.ssh"

      - name: Get list of SSH shared keys
        shell: "find {{ playbook_dir }}/files/ssh-keys/shared -name 'id_rsa_lxc*'"
        register: ssh_shared_keys_files

      - name: Copy SSH shared keys to /var/lib/lxc/{{ DEST }}/rootfs/home/{{ banana_username }}/.ssh/
        copy:
          src: "{{ item }}"
          dest: "/var/lib/lxc/{{ DEST }}/rootfs/home/{{ banana_username }}/.ssh/"
          owner: root
          group: root
          mode: '0600'
        with_items: "{{ ssh_shared_keys_files.stdout_lines }}"

      - name: Change public keys permissions after copy
        shell: "chmod 644 /var/lib/lxc/{{ DEST }}/rootfs/home/{{ banana_username }}/.ssh/*pub"

      - name: Change public keys permission in {{ DEST }}
        shell: "chmod 600 /var/lib/lxc/{{ DEST }}/rootfs/home/{{ banana_username }}/.ssh/id_rsa_lxc"

      - name: Change keys permissions after copy in localhost
        shell: "chmod 600 {{ playbook_dir }}/files/ssh-keys/shared/id_rsa_lxc"

      - name: Generate authorized_keys
        command: lxc-attach -n {{ DEST }} -- sh -c "cat /home/{{ banana_username }}/.ssh/id_rsa_lxc.pub > /home/{{ banana_username }}/.ssh/authorized_keys; chmod 600  /home/{{ banana_username }}/.ssh/authorized_keys"

      - name: Create dir /home/concesion/.ssh
        command: lxc-attach -n {{ DEST }} -- sh -c "chown -R {{ banana_username }}:{{ banana_username }} /home/{{ banana_username }}/.ssh"

      - name: Install packages (batch 1)
        command: lxc-attach -n {{ DEST }} -- sh -c "apt-get install -y {{ item }}"
        loop:
          - wget
          - curl
          - zsh

      - name: Remove sources.list file from {{ DEST }}
        command: lxc-attach -n {{ DEST }} -- rm -f /etc/apt/sources.list

      - name: Set sources lists
        command: lxc-attach -n {{ DEST }} -- sh -c "echo {{ item }} >> /etc/apt/sources.list"
        loop:
          - "# generated by ansible"
          - "deb http://deb.debian.org/debian/ bookworm main contrib non-free-firmware"
          - "deb-src http://deb.debian.org/debian/ bookworm main contrib non-free-firmware"
          - "deb http://security.debian.org/debian-security bookworm-security main contrib non-free-firmware"
          - "deb-src http://security.debian.org/debian-security bookworm-security main contrib non-free-firmware"
          - "deb http://deb.debian.org/debian/ bookworm-updates main contrib non-free-firmware"
          - "deb-src http://deb.debian.org/debian/ bookworm-updates main contrib non-free-firmware"
          - "deb [arch=amd64,i386] http://www.deb-multimedia.org bookworm main non-free"

      - name: Get keys for web.deb-multimedia.org
        command: lxc-attach -n {{ DEST }} -- sh -c "wget http://www.deb-multimedia.org/pool/main/d/deb-multimedia-keyring/deb-multimedia-keyring_2016.8.1_all.deb; dpkg -i deb-multimedia-keyring_2016.8.1_all.deb"

      - name: Update sources
        command: lxc-attach -n {{ DEST }} -- sh -c "apt-get update"

      - name: Create group {{ devpl_group}} with GID {{ devpl_gid }} in the LXC container
        command: lxc-attach -n {{ DEST }} -- echo "{{devpl_group}}:x:{{ devpl_gid}}:{{banana_username}}" >> /etc/group 

      - name: Ensure the directory data exists for mounting
        file:
          path: "/var/lib/lxc/{{ DEST }}/rootfs/data"
          state: directory

      - name: Let /data be mounted in the LXC container
        lineinfile:
          path: "/var/lib/lxc/{{ DEST }}/config"
          line: "lxc.mount.entry = /home/carlos/data/Banana_LXC/data data none bind 0 0"
          state: present

      - name: Delete /home. It will be mounted
        command: rm -rf /var/lib/lxc/{{ DEST }}/rootfs/home

      - name: Ensure the directory home exists for mounting
        file:
          path: "/var/lib/lxc/{{ DEST }}/rootfs/home"
          state: directory

      - name: Let /home be mounted in the LXC container
        lineinfile:
          path: "/var/lib/lxc/{{ DEST }}/config"
          line: "lxc.mount.entry = /home/carlos/data/Banana_LXC/home home none bind 0 0"
          state: present

      - name: Ensure the directory nix exists for mounting
        file:
          path: "/var/lib/lxc/{{ DEST }}/rootfs/nix"
          state: directory

      - name: Ensure /nix is mounted in the LXC container
        lineinfile:
          path: "/var/lib/lxc/{{ DEST }}/config"
          line: "lxc.mount.entry = /home/carlos/data/Banana_LXC/nix nix none bind 0 0"
          state: present

      # - name: Ensure /home/sice is mounted in the LXC container
      #   lineinfile:
      #     path: "/var/lib/lxc/{{ DEST }}/config"
      #     line: "lxc.mount.entry = /home/sice /var/lib/lxc/{{ DEST }}/rootfs/home/sice none bind 0 0"
      #     state: present

      # - name: Set zsh as default shell for {{ banana_username }} in {{ DEST }}
      #   command: lxc-attach -n {{ DEST }} -u {{banana_uid }} -- sh -c "chsh -s $(which zsh)"

      - name: Set SSHD to listen on port 352
        lineinfile:
          path: /var/lib/lxc/{{ DEST }}/rootfs/etc/ssh/sshd_config
          regexp: '^#?Port '
          line: 'Port 352'
          state: present

      # - name: Restart SSHD in the LXC container
      #   command: lxc-attach {{ DEST }} -- sh -c "systemctl restart sshd"

      - name: Stop {{ DEST }} container if it is running
        command: lxc-stop -n {{ DEST }}
        ignore_errors: yes

      - name: Remove static DHCP entries for {{ tsc_ip_output.stdout }} in dnsmasq.conf
        lineinfile:
          path: /etc/lxc/dnsmasq.conf
          state: absent
          regexp: '^dhcp-host=.*{{ tsc_ip_output.stdout }}.*'

      - name: Set static DHCP for {{ DEST }} in dnsmasq.conf
        lineinfile:
          path: /etc/lxc/dnsmasq.conf
          line: "dhcp-host={{ DEST }},{{ tsc_ip_output.stdout }}"

      - name: Create symlink for dnsmasq.conf
        file:
          src: /etc/lxc/dnsmasq.conf
          dest: /etc/dnsmasq.conf
          state: link

      - name: Remove lines containing {{ DEST }} from dnsmasq leases file
        command: sed -i '/{{ DEST }}/d' /var/lib/misc/dnsmasq.lxcbr0.leases

      - name: Restart lxc-net service
        systemd:
          name: lxc-net
          state: restarted

      - name: Replace line in /var/lib/lxc/{{ DEST }}/rootfs/etc/passwd for user carlos
        lineinfile:
          path: /var/lib/lxc/{{ DEST }}/rootfs/etc/passwd
          regexp: '^carlos:x:.*'
          line: 'carlos:x:1015:300:carlos,,,:/home/carlos:/bin/zsh'
          state: present

      # - name: Let /dev/net/tun for openvpn to work
      #   lineinfile:
      #     path: "/var/lib/lxc/{{ DEST }}/config"
      #     line: "lxc.cgroup2.devices.allow: c 10:200 rwm"
      #     state: present

      # - name: Mount /dev/net for openvpn to work
      #   lineinfile:
      #     path: "/var/lib/lxc/{{ DEST }}/config"
      #     line: "lxc.mount.entry: /dev/net dev/net none bind,create=dir"
      #     state: present

      - name: Start LXC container {{ DEST }}
        command: lxc-start -n {{ DEST }}

      - name: Pause for 10 seconds
        pause:
          seconds: 3

      - name: List all LXC containers
        command: lxc-ls -f
        register: lxc_list_final

      - name: Display all LXC containers
        debug:
          var: lxc_list_final.stdout_lines
#+end_src


***** Notes:

1. Clonar el repositorio con la configuraciÃ³n de ansible
    #+begin_src sh :tangle no
      # this file is ansible.cfg in the root of the project
      git clone https://github.com/ceblan/Howto-LXC.git
      cd Howto-LXC
   #+end_src
  
2. =Ensure you have =ansible= installed and configured on your control
   machine. It's recommended to have ssh keys to access the hosts and guests.
   
   #+begin_src conf :tangle no
     # this file is ansible.cfg in the root of the project
     [defaults]
     inventory = hosts
     private_key_file = ~/.ssh/id_rsa_lxc # create thix key for the project
     remote_user = concesion
   #+end_src

3. Ensure you create a directory /ssh-keys/ with with the host-keys and the
   shared-keys to avoid ssh problems when container is regenerated
    #+begin_src sh :tangle no
      # this file is ansible.cfg in the root of the project
      sudo mkdir -p ssh-keys/bananapi
      sudo cp /etc/ssh/ssh_host* ssh-keys/bananapi
      sudo mkdir -p ssh-keys/shared
      ssh-keygen -t rsa -b 2048 -f ./ssh-keys/shared/id_rsa_lxc
   #+end_src
 
   

4. =Adjust your inventory file to include tsc-host-1.=

   #+begin_src conf :tangle no
     # this file is inventory.ini in the root of the project
     [lxc_hosts]
     uberrimus ansible_host=127.0.0.1
     urganda  ansible_host=192.168.1.5
     [lxc_guests]
     bananapi ansible_hosts=192.168.1.10
     bananapi ansible_user=carlos
     #+end_src
  
5. Run the playbook with:
   #+begin_src shell :tangle no
     cd ansible
     ansible-playbook -i inventory.ini tasks/create-lxc-bananapi.yml --extra-vars "DEST=bananapi"
   #+end_src
 
*** bananapi packages installation.

**** Various packages
:PROPERTIES:
:ID:       6a9266c3-768a-4d72-8248-38aaae095445
:END:

Instalation of Package requirements

#+begin_src yaml :tangle ansible/tasks/install-packages-bananapi.yml
---
# - name: Set up bananapi packages
#   hosts: bananapi # here should be tsc-host-1 instead
#   become_method: sudo
#   become: true
#   vars_files:
#    - ./vars/vars.yml
#    #- ./vars/secrets.yml

#   #vars_prompt:
#     #- name: "ansible_become_pass"
#       #prompt: "Enter your sudo password in remote server"
#       #private: yes


  # tasks:
    # - name: apt update
    #   become: yes
    #   command: apt update

    - name: avoid tshark config to block installation #esto es para que no pregunte lo del setuid y se bloquee
      become: yes
      shell: echo "wireshark-common wireshark-common/install-setuid boolean true" | sudo debconf-set-selections

    - name: Set APT to not install recommended packages
      copy:
        dest: /etc/apt/apt.conf.d/01norecommend
        content: |
          APT::Install-Recommends "0";
          APT::Install-Suggests "0";

    - name: Update APT package index
      apt:
        update_cache: yes

    - name: Install required packages
      become: yes
      become_method: sudo
      apt:
        name:
          - vim
          - net-tools
          - sudo
          - ripgrep
          - fzf
          - python3-pip
          - cron
          - mosh
        state: present
        install_recommends: no

    - name: Install docker required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg2
          - software-properties-common
          - bash-completion
        state: present

    - name: Add Docker GPG key
      shell: >
        curl -fsSL https://download.docker.com/linux/debian/gpg |
        gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      args:
        creates: /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Ensure Docker sources list file exists
      file:
        path: /etc/apt/sources.list.d/docker.list
        state: touch

    - name: Set up the Docker repository
      lineinfile:
        path: /etc/apt/sources.list.d/docker.list
        line: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        state: present

    - name: Update APT package index
      apt:
        update_cache: yes

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose
        state: present

    - name: Delete the /var/lib/docker directory
      file:
        path: /var/lib/docker
        state: absent

    - name: Create a symbolic link in /var/lib to /data/docker
      file:
        src: /data/docker
        dest: /var/lib/docker
        state: link

    - name: Add user {{ banana_username }} to the docker group
      command: usermod -aG docker carlos

    - name: Start and enable Docker
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Update apt package index
      apt:
        update_cache: yes
#+end_src

***** Notes:

  
1. Run the playbook with:
   #+begin_src shell :tangle no
     cd ansible 
     ansible-playbook -i inventory.ini tasks/install-packages-bananapi.yml -l bananapi --extra-vars "DEST=bananapi"
   #+end_src

*** bananapi cron jobs


Add jobs to cron

#+begin_src yaml :tangle ansible/tasks/add_cron_jobs_bananapi.yml
---
# - name: Add cron job for root user in LXC container
#   hosts: bananapi
#   become: true  # Use this to escalate permissions to root
#   tasks:

    - name: Add a cron job for root
      cron:
        name: "Goaccess"
        minute: "*/15"
        hour: "*"
        job: "/home/carlos/bin/my_goaccess.sh start"
        state: present

    - name: Add google_domains_ip_refresh.sh to cron
      cron:
        name: "Set ip cloudeflare Domains"
        minute: "*/5"
        hour: "*"
        job: "/home/carlos/bin/google_domains_ip_refresh.sh"
        state: present

    - name: Add anti-goleores iptables rules to cron
      cron:
        name: "IPtables banana anti-goleores"
        minute: "*/15"
        hour: "*"
        job: "/home/carlos/bin/IPtables_banana.sh"
        state: present

    - name: lo de emacs
      command: apt build-dep -y emacs

    - name: Restart docker
      command: /etc/init.d/docker restart

    - name: Install checkinstall
      apt:
        name:
          - libtool-bin
          - checkinstall
          - libtree-sitter0
          - libtree-sitter-dev
          - xclip
          - lsof
          - fail2ban
          - less
        state: present

    - name: Copy jail.local to /etc/fail2ban
      copy:
        src: /home/carlos/.dotfiles/configurations/bananapi/etc/fail2ban/jail.local
        dest: /etc/fail2ban/jail.local
        mode: '0644'
        force: no

    - name: Copy iptables-traefik443.conf to /etc/fail2ban/action.d
      copy:
        src: /home/carlos/.dotfiles/configurations/bananapi/etc/fail2ban/action.d/iptables-traefik443.conf
        dest: /etc/fail2ban/action.d/iptables-traefik443.conf
        mode: '0644'
        force: no

    - name: Copy masscan.conf to /etc/fail2ban/action.d
      copy:
        src: /home/carlos/.dotfiles/configurations/bananapi/etc/fail2ban/action.d/masscan.conf
        dest: /etc/fail2ban/action.d/masscan.conf
        mode: '0644'
        force: no

    - name: Copy sshd.conf to /etc/fail2ban/action.d
      copy:
        src:  /home/carlos/.dotfiles/configurations/bananapi/etc/fail2ban/action.d/sshd.conf
        dest: /etc/fail2ban/action.d/sshd.conf
        mode: '0644' 
        force: no

    - name: Restart fail2ban
      command: /etc/init.d/fail2ban restart

    # INSTALL PIVPN UNUTTENDEDÂº
    # curl -L https://install.pivpn.io > install.sh
    # chmod +x install.sh
    # ./install.sh --unattended options.conf
#+end_src
***** Notes:

  
1. Run the playbook with:
   #+begin_src shell :tangle no
     cd ansible 
     ansible-playbook -i inventory.ini tasks/add_cron_jobs_bananapi.yml -l bananapi --extra-vars "DEST=bananapi" 
   #+end_src


*** Instala Emacs en banana

#+begin_src yaml :tangle ansible/tasks/emacs.yml  
---
  - name: Execute checkinstall command
    become: true
    become_user: carlos
    command: sudo checkinstall --pkgversion 29.4 -y -D sudo make install
    args:
      chdir: /home/carlos/git-carlos/emacs
#+end_src

*** bananapi apply all previous playbooks

#+begin_src yaml :tangle ansible/tasks/prepara-bananapi.yml
---
  - name: Prepara bananapi
    hosts: urganda
    become: yes
    vars_files:
      - ./vars/vars.yml
      - ./vars/secrets.yml
    tasks:
      - name: Create LXC container
        include_tasks: create-lxc-bananapi.yml
        vars:
          DEST: "{{ DEST }}"

  - name: Set up bananapi packages
    hosts: bananapi
    become_method: sudo
    become: true
    vars_files:
      - ./vars/vars.yml

    tasks:
      - name: Call Install packages playbook
        include_tasks: install-packages-bananapi.yml
        vars:
          DEST: "{{ DEST }}"

      - name: Call cron jobs paybook
        include_tasks: add_cron_jobs_bananapi.yml
        vars:
          DEST: "{{ DEST }}"

      - name: Install emacs
        include_tasks: emacs.yml
        vars:
          DEST: "{{ DEST }}"
#+end_src
