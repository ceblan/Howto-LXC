---
# - name: Set up LXC container for a bananapi
#   hosts: urganda # here should be tsc-host-1 instead
#   become: yes
#   vars_files:
#     - ./vars/vars.yml
#     - ./vars/secrets.yml

#   tasks:
    - name: Install LXC
      apt:
        name: lxc
        state: present
        update_cache: yes

    - name: Uncomment LXC_DHCP_CONFILE in dnsmasq.conf
      lineinfile:
        path: /etc/default/lxc-net
        regexp: '^#LXC_DHCP_CONFILE'
        line: 'LXC_DHCP_CONFILE=/etc/dnsmasq.conf'

    - name: Ensure the directory for SSH keys exists
      file:
        path: "{{ playbook_dir }}/files/ssh-keys/{{ DEST }}"
        state: directory

    - name: Check if keys exist
      shell: "find {{ playbook_dir }}/files/ssh-keys/{{ DEST }} -name '*key*' | wc -l"
      register: ssh_keys_exists
      changed_when: false

    - debug:
        msg: "Number of keys found: {{ ssh_keys_exists.stdout }}"

    - name: Generate SSH host keys
      command: ssh-keygen -t {{ item }} -N "" -f {{ playbook_dir }}/files/ssh-keys/{{ DEST }}/ssh_host_{{ item }}_key
      with_items:
        - rsa
        - ecdsa
        - ed25519
      when: ssh_keys_exists.stdout | trim | int != 6

    - name: Change {{ playbook_dir }}/files/ssh-keys/{{ DEST }} owner to {{ ansible_env.USER }}
      shell: "chown {{ ansible_env.USER }}:{{ ansible_env.USER }} {{ playbook_dir }}/files/ssh-keys/{{ DEST }}/*"
      register: ssh_key_files


    - name: Change keys permissions before copy
      shell: "chmod 644 {{ playbook_dir }}/files/ssh-keys/{{ DEST }}/*"
      register: ssh_key_files

    - name: Ensure the directory for SSH shared keys exists
      file:
        path: "{{ playbook_dir }}/files/ssh-keys/shared"
        state: directory

    - name: Check if shared keys exist
      shell: "find {{ playbook_dir }}/files/ssh-keys/shared/ -name 'id_rsa_lxc*' | wc -l"
      register: ssh_shared_keys_exists
      changed_when: false

    - debug:
        msg: "Number of shared keys found: {{ ssh_shared_keys_exists.stdout }}"

    - name: Generate SSH shared keys
      command: ssh-keygen -t rsa -N "" -f {{ playbook_dir }}/files/ssh-keys/shared/id_rsa_lxc
      when: ssh_shared_keys_exists.stdout | trim | int != 2

    - name: Change keys permissions before copy
      shell: "chmod 644 {{ playbook_dir }}/files/ssh-keys/shared/*"
      register: ssh_key_files


    - name: Check if {{ DEST }} container exists
      command: lxc-ls | grep {{ DEST }}
      register: tsc_exists
      ignore_errors: yes

    # - name: Output inventory sources
    #   debug:
    #     var: hostvars[inventory_hostname]['ansible_inventory_sources']

    # - name: Output tsc_exists
    #   debug:
    #     var: tsc_exists

    - name: Check if {{ DEST }} container exists
      command: lxc-ls --fancy
      register: lxc_list

    - name: Check if {{ DEST }} container is running
      command: lxc-ls --running | grep {{ DEST }}
      register: container_status
      ignore_errors: yes
      when: tsc_exists.rc == 0

    # - name: Output value of container_status
    #   debug:
    #     var: container_status

    - name: Stop {{ DEST }} container if it is running
      command: lxc-stop -n {{ DEST }}
      ignore_errors: yes
      when: container_status.stdout != "" and  DEST in container_status.stdout_lines

    - name: Destroy {{ DEST }} container if it exists
      command: lxc-destroy -n {{ DEST }}
      when: DEST in tsc_exists.stdout

    - name: Create directory for {{ DEST }} container
      file:
        path: /var/lib/lxc/{{ DEST }}
        state: directory

    - name: Check if {{ DEST }} container exists
      command: lxc-ls --fancy
      register: lxc_list

    - name: Create LXC container {{ DEST }} if it does not exist
      command: lxc-create --name {{ DEST }} --template download -- --dist debian --release bookworm --arch amd64
      when: "DEST not in lxc_list.stdout"

    - name: Get IP for {{ DEST }} from inventory
      shell: "grep {{ DEST }}.*ansible_host {{ hostvars[inventory_hostname]['ansible_inventory_sources'][0] }} | awk -F'=' '{print $2}'"
      register: tsc_ip_output

    - name: Print the IP of {{ DEST }}
      debug:
        msg: "IP of {{ DEST }}: {{ tsc_ip_output.stdout }}"

    - name: Remove static DHCP entries for {{ tsc_ip_output.stdout }} in dnsmasq.conf
      lineinfile:
        path: /etc/lxc/dnsmasq.conf
        state: absent
        regexp: '^dhcp-host=.*{{ tsc_ip_output.stdout }}.*'

    - name: Set static DHCP for {{ DEST }} in dnsmasq.conf
      lineinfile:
        path: /etc/lxc/dnsmasq.conf
        line: "dhcp-host={{ DEST }},{{ tsc_ip_output.stdout }}"

    - name: Create symlink for dnsmasq.conf
      file:
        src: /etc/lxc/dnsmasq.conf
        dest: /etc/dnsmasq.conf
        state: link

    - name: Remove lines containing {{ DEST }} from dnsmasq leases file
      command: sed -i '/{{ DEST }}/d' /var/lib/misc/dnsmasq.lxcbr0.leases

    - name: Restart lxc-net service
      systemd:
        name: lxc-net
        state: restarted

    - name: Start LXC container {{ DEST }}
      command: lxc-start -n {{ DEST }}
      when: "DEST not in lxc_list.stdout"

    - name: Check if {{ DEST }} container is running
      command: lxc-info -n {{ DEST }} -s
      register: container_status
      ignore_errors: true

    - name: Install OpenSSH server in {{ DEST }}
      command: lxc-attach -n {{ DEST }} -- apt-get install -y openssh-server
      when: container_status.rc == 0

    - name: Install Python3 in {{ DEST }}
      command: lxc-attach -n {{ DEST }} -- apt-get install -y python3 python-apt-common
      when: container_status.rc == 0

    # - name: Copy SSH host keys to {{ DEST }}
    #   command: lxc-file push {{ playbook_dir }}/files/ssh-keys/{{ DEST }}/* {{ DEST }}/etc/ssh/
    #   when: container_status.rc == 0

    - name: Get list of SSH host keys
      shell: "find {{ playbook_dir }}/files/ssh-keys/{{ DEST }} -name '*key*'"
      register: ssh_key_files

    - name: Copy SSH host keys to /var/lib/lxc/{{ DEST }}/rootfs/etc/ssh/
      copy:
        src: "{{ item }}"
        dest: "/var/lib/lxc/{{ DEST }}/rootfs/etc/ssh/"
        owner: root
        group: root
        mode: '0600'
      with_items: "{{ ssh_key_files.stdout_lines }}"

    - name: Change public keys permissions after copy
      shell: "chmod 644 /var/lib/lxc/{{ DEST }}/rootfs/etc/ssh/*pub"

    - name: Restart SSH service in {{ DEST }}
      command: lxc-attach -n {{ DEST }} -- /etc/init.d/ssh restart

    - name: Set root password for {{ DEST }}
      command: lxc-attach -n {{ DEST }} -- sh -c "echo 'root:{{  root_password }}' | chpasswd"

    - name: Create user {{ banana_username }}
      command: lxc-attach -n {{ DEST }} -- adduser --disabled-password --gecos "" --uid {{banana_uid}} {{ banana_username }}

    - name: Create group {{ devpl_group}} with GID {{ devpl_gid }} in the LXC container
      command: lxc-attach -n {{ DEST }} -- echo "{{devpl_group}}:x:{{ devpl_gid}}:{{banana_username}}" >> /etc/group

    - name: Add user {{ banana_username }} to the sudo group
      command: lxc-attach -n {{ DEST }} -- usermod -aG sudo {{ banana_username }}

    - name: Set {{ banana_username }} password for {{ DEST }}
      command: lxc-attach -n {{ DEST }} -- sh -c "echo '{{ banana_username }}:{{  root_password }}' | chpasswd"

    - name: Add {{ devpl_group }}group
      command: lxc-attach -n {{ DEST }} -- groupadd -g 300 {{ devpl_group }} 

    - name: Add user {{ banana_username }} to the {{ devpl_group }} group
      command: lxc-attach -n {{ DEST }} -- usermod -aG devpl {{ banana_username }}

    - name: Allow members of the sudo group to run sudo without a password
      become: yes
      become_method: sudo
      lineinfile:
        path:  "/var/lib/lxc/{{ DEST }}/rootfs/etc/sudoers"
        regexp: '^%sudo'
        line: '%sudo ALL=(ALL:ALL) NOPASSWD: ALL'

    - name: Restart sudo
      command: lxc-attach -n {{ DEST }} -- /etc/init.d/sudo restart

    - name: Create dir /home/{{ banana_username }}/.ssh
      command: lxc-attach -n {{ DEST }} -- sh -c "mkdir -p /home/{{ banana_username }}/.ssh; chown -R {{ banana_username }}:{{ banana_username }} /home/{{ banana_username }}/.ssh"

    - name: Get list of SSH shared keys
      shell: "find {{ playbook_dir }}/files/ssh-keys/shared -name 'id_rsa_lxc*'"
      register: ssh_shared_keys_files

    - name: Copy SSH shared keys to /var/lib/lxc/{{ DEST }}/rootfs/home/{{ banana_username }}/.ssh/
      copy:
        src: "{{ item }}"
        dest: "/var/lib/lxc/{{ DEST }}/rootfs/home/{{ banana_username }}/.ssh/"
        owner: root
        group: root
        mode: '0600'
      with_items: "{{ ssh_shared_keys_files.stdout_lines }}"

    - name: Change public keys permissions after copy
      shell: "chmod 644 /var/lib/lxc/{{ DEST }}/rootfs/home/{{ banana_username }}/.ssh/*pub"

    - name: Change public keys permission in {{ DEST }}
      shell: "chmod 600 /var/lib/lxc/{{ DEST }}/rootfs/home/{{ banana_username }}/.ssh/id_rsa_lxc"

    - name: Change keys permissions after copy in localhost
      shell: "chmod 600 {{ playbook_dir }}/files/ssh-keys/shared/id_rsa_lxc"

    - name: Generate authorized_keys
      command: lxc-attach -n {{ DEST }} -- sh -c "cat /home/{{ banana_username }}/.ssh/id_rsa_lxc.pub > /home/{{ banana_username }}/.ssh/authorized_keys; chmod 600  /home/{{ banana_username }}/.ssh/authorized_keys"

    - name: Create dir /home/concesion/.ssh
      command: lxc-attach -n {{ DEST }} -- sh -c "chown -R {{ banana_username }}:{{ banana_username }} /home/{{ banana_username }}/.ssh"

    - name: Install packages (batch 1)
      command: lxc-attach -n {{ DEST }} -- sh -c "apt-get install -y {{ item }}"
      loop:
        - wget
        - curl
        - zsh

    - name: Remove sources.list file from {{ DEST }}
      command: lxc-attach -n {{ DEST }} -- rm -f /etc/apt/sources.list

    - name: Set sources lists
      command: lxc-attach -n {{ DEST }} -- sh -c "echo {{ item }} >> /etc/apt/sources.list"
      loop:
        - "# generated by ansible"
        - "deb http://deb.debian.org/debian/ bookworm main contrib non-free-firmware"
        - "deb-src http://deb.debian.org/debian/ bookworm main contrib non-free-firmware"
        - "deb http://security.debian.org/debian-security bookworm-security main contrib non-free-firmware"
        - "deb-src http://security.debian.org/debian-security bookworm-security main contrib non-free-firmware"
        - "deb http://deb.debian.org/debian/ bookworm-updates main contrib non-free-firmware"
        - "deb-src http://deb.debian.org/debian/ bookworm-updates main contrib non-free-firmware"
        - "deb [arch=amd64,i386] http://www.deb-multimedia.org bookworm main non-free"

    - name: Get keys for web.deb-multimedia.org
      command: lxc-attach -n {{ DEST }} -- sh -c "wget http://www.deb-multimedia.org/pool/main/d/deb-multimedia-keyring/deb-multimedia-keyring_2016.8.1_all.deb; dpkg -i deb-multimedia-keyring_2016.8.1_all.deb"

    - name: Update sources
      command: lxc-attach -n {{ DEST }} -- sh -c "apt-get update"

    - name: Create group {{ devpl_group}} with GID {{ devpl_gid }} in the LXC container
      command: lxc-attach -n {{ DEST }} -- echo "{{devpl_group}}:x:{{ devpl_gid}}:{{banana_username}}" >> /etc/group 

    - name: Ensure the directory data exists for mounting
      file:
        path: "/var/lib/lxc/{{ DEST }}/rootfs/data"
        state: directory

    - name: Let /data be mounted in the LXC container
      lineinfile:
        path: "/var/lib/lxc/{{ DEST }}/config"
        line: "lxc.mount.entry = /home/carlos/data/Banana_LXC/data data none bind 0 0"
        state: present

    - name: Delete /home. It will be mounted
      command: rm -rf /var/lib/lxc/{{ DEST }}/rootfs/home

    - name: Ensure the directory home exists for mounting
      file:
        path: "/var/lib/lxc/{{ DEST }}/rootfs/home"
        state: directory

    - name: Let /home be mounted in the LXC container
      lineinfile:
        path: "/var/lib/lxc/{{ DEST }}/config"
        line: "lxc.mount.entry = /home/carlos/data/Banana_LXC/home home none bind 0 0"
        state: present

    - name: Ensure the directory nix exists for mounting
      file:
        path: "/var/lib/lxc/{{ DEST }}/rootfs/nix"
        state: directory

    - name: Ensure /nix is mounted in the LXC container
      lineinfile:
        path: "/var/lib/lxc/{{ DEST }}/config"
        line: "lxc.mount.entry = /home/carlos/data/Banana_LXC/nix nix none bind 0 0"
        state: present

    # - name: Ensure /home/sice is mounted in the LXC container
    #   lineinfile:
    #     path: "/var/lib/lxc/{{ DEST }}/config"
    #     line: "lxc.mount.entry = /home/sice /var/lib/lxc/{{ DEST }}/rootfs/home/sice none bind 0 0"
    #     state: present

    # - name: Set zsh as default shell for {{ banana_username }} in {{ DEST }}
    #   command: lxc-attach -n {{ DEST }} -u {{banana_uid }} -- sh -c "chsh -s $(which zsh)"

    - name: Set SSHD to listen on port 352
      lineinfile:
        path: /var/lib/lxc/{{ DEST }}/rootfs/etc/ssh/sshd_config
        regexp: '^#?Port '
        line: 'Port 352'
        state: present

    # - name: Restart SSHD in the LXC container
    #   command: lxc-attach {{ DEST }} -- sh -c "systemctl restart sshd"

    - name: Stop {{ DEST }} container if it is running
      command: lxc-stop -n {{ DEST }}
      ignore_errors: yes

    - name: Remove static DHCP entries for {{ tsc_ip_output.stdout }} in dnsmasq.conf
      lineinfile:
        path: /etc/lxc/dnsmasq.conf
        state: absent
        regexp: '^dhcp-host=.*{{ tsc_ip_output.stdout }}.*'

    - name: Set static DHCP for {{ DEST }} in dnsmasq.conf
      lineinfile:
        path: /etc/lxc/dnsmasq.conf
        line: "dhcp-host={{ DEST }},{{ tsc_ip_output.stdout }}"

    - name: Create symlink for dnsmasq.conf
      file:
        src: /etc/lxc/dnsmasq.conf
        dest: /etc/dnsmasq.conf
        state: link

    - name: Remove lines containing {{ DEST }} from dnsmasq leases file
      command: sed -i '/{{ DEST }}/d' /var/lib/misc/dnsmasq.lxcbr0.leases

    - name: Restart lxc-net service
      systemd:
        name: lxc-net
        state: restarted

    - name: Replace line in /var/lib/lxc/{{ DEST }}/rootfs/etc/passwd for user carlos
      lineinfile:
        path: /var/lib/lxc/{{ DEST }}/rootfs/etc/passwd
        regexp: '^carlos:x:.*'
        line: 'carlos:x:1015:300:carlos,,,:/home/carlos:/bin/zsh'
        state: present

    # - name: Let /dev/net/tun for openvpn to work
    #   lineinfile:
    #     path: "/var/lib/lxc/{{ DEST }}/config"
    #     line: "lxc.cgroup2.devices.allow: c 10:200 rwm"
    #     state: present

    # - name: Mount /dev/net for openvpn to work
    #   lineinfile:
    #     path: "/var/lib/lxc/{{ DEST }}/config"
    #     line: "lxc.mount.entry: /dev/net dev/net none bind,create=dir"
    #     state: present

    - name: Start LXC container {{ DEST }}
      command: lxc-start -n {{ DEST }}

    - name: Pause for 10 seconds
      pause:
        seconds: 3

    - name: List all LXC containers
      command: lxc-ls -f
      register: lxc_list_final

    - name: Display all LXC containers
      debug:
        var: lxc_list_final.stdout_lines
