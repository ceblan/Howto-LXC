# templates/haproxy.cfg.j2
global
    log /dev/log    local0
    log /dev/log    local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

defaults
    log     global
    mode    tcp
    option  tcplog
    option  dontlognull
    # timeouts incrementales para robustez
    timeout connect 5s    # Tiempo máximo para esperar una conexión exitosa a un servidor.
    timeout client  60m   # Tiempo máximo de inactividad en el lado del cliente.
    timeout server  60m   # Tiempo máximo de inactividad en el lado del servidor.

frontend pg_frontend_rw
    bind *:{{ haproxy_listen_port_rw }}
    mode tcp
    default_backend pg_backend_rw
    # Option to log connections
    # option tcplog

backend pg_backend_rw
    mode tcp
    balance first  # Envia tráfico al primer servidor saludable.
                   # Dado que solo el primario pasará el health check, esto es efectivo.
    option httpchk GET /primary HTTP/1.1\r\nHost:\ localhost
    # Patroni devuelve HTTP 200 si el nodo es primario, 503 si es réplica o no está listo.
    http-check expect status 200

    # Servidores Patroni (tus nodos postgres)
    # HAProxy usará node_ip:patroni_api_port (ej. 10.0.3.101:8008) para el health check.
    # El tráfico de datos se enviará a node_ip:5432 (puerto PostgreSQL).
    {% for node in groups['postgres_nodes'] %}
    server {{ hostvars[node]['node_name'] }} {{ hostvars[node]['node_ip'] }}:5432 check port {{ patroni_api_port }} inter 3s fall 2 rise 3
    {% endfor %}

listen stats
    bind *:{{ haproxy_stats_port }}
    mode http
    stats enable
    stats uri /stats # URL para acceder a las estadísticas, ej: http://<IP_HAPROXY>:8404/stats
    stats realm Haproxy\ Statistics
    stats auth {{ haproxy_stats_user }}:{{ haproxy_stats_password }}
    # stats admin if TRUE # Descomentar con precaución para permitir acciones administrativas desde la web
